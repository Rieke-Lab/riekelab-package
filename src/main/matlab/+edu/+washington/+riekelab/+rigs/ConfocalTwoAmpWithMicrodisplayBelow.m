classdef ConfocalTwoAmpWithMicrodisplayBelow < edu.washington.riekelab.rigs.Confocal
    
    methods
        
        function obj = ConfocalTwoAmpWithMicrodisplayBelow()
            import symphonyui.builtin.devices.*;
            import symphonyui.core.*;
            import edu.washington.*;
            
            daq = obj.daqController;

            % Remove device bound to the analog output 1 channel
            for i = 1:numel(obj.devices)
                dev = obj.devices{i};
                s = dev.getOutputStreams();
                if ~isempty(s) && strcmp(s{1}.name, 'ao1')
                    dev.unbindStream('ao1');
                    obj.removeDevice(dev);
                    break;
                end
            end
            
            amp2 = MultiClampDevice('Amp2', 2).bindStream(daq.getStream('ao1')).bindStream(daq.getStream('ai3'));
            obj.addDevice(amp2);

            ramps = containers.Map();
            ramps('minimum') = linspace(0, 65535, 256);
            ramps('low')     = 65535 * importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'microdisplay_below_low_gamma_ramp.txt'));
            ramps('medium')  = 65535 * importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'microdisplay_below_medium_gamma_ramp.txt'));
            ramps('high')    = 65535 * importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'microdisplay_below_high_gamma_ramp.txt'));
            ramps('maximum') = linspace(0, 65535, 256);
            microdisplay = riekelab.devices.MicrodisplayDevice('gammaRamps', ramps, 'micronsPerPixel', 1.2, 'comPort', 'COM3');
            microdisplay.bindStream(daq.getStream('doport1'));
            daq.getStream('doport1').setBitPosition(microdisplay, 15);
            microdisplay.addConfigurationSetting('ndfs', {}, ...
                'type', PropertyType('cellstr', 'row', {'E1', 'E2', 'E3', 'E4', 'E12'}));
            microdisplay.addResource('ndfAttenuations', containers.Map( ...
                {'white', 'red', 'green', 'blue'}, { ...
                containers.Map( ...
                    {'E1', 'E2', 'E3', 'E4', 'E12'}, ...
                    {0.26, 0.59, 0.94, 2.07, 0.30}), ...
                containers.Map( ...
                    {'E1', 'E2', 'E3', 'E4', 'E12'}, ...
                    {0.26, 0.61, 0.94, 2.05, 0.29}), ...
                containers.Map( ...
                    {'E1', 'E2', 'E3', 'E4', 'E12'}, ...
                    {0.26, 0.58, 0.94, 2.12, 0.29}), ...
                containers.Map( ...
                    {'E1', 'E2', 'E3', 'E4', 'E12'}, ...
                    {0.26, 0.57, 0.93, 2.13, 0.29})}));
            microdisplay.addResource('fluxFactorPaths', containers.Map( ...
                {'low', 'medium', 'high'}, { ...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'microdisplay_below_low_flux_factors.txt'), ...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'microdisplay_below_medium_flux_factors.txt'), ...
                riekelab.Package.getCalibrationResource('rigs', 'confocal', 'microdisplay_below_high_flux_factors.txt')}));
            microdisplay.addConfigurationSetting('lightPath', 'below', 'isReadOnly', true);
            microdisplay.addResource('spectrum', containers.Map( ...
                {'white', 'red', 'green', 'blue'}, { ...
                importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'microdisplay_below_white_spectrum.txt')), ...
                importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'microdisplay_below_red_spectrum.txt')), ...
                importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'microdisplay_below_green_spectrum.txt')), ...
                importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'microdisplay_below_blue_spectrum.txt'))}));
            obj.addDevice(microdisplay);
            
            frameMonitor = UnitConvertingDevice('Frame Monitor', 'V').bindStream(daq.getStream('ai7'));
            obj.addDevice(frameMonitor);
            
                    
        end
        
    end
    
end

